name: Publish Solutions to Public Assets

on:
  push:
    paths:
      - 'solutions/**'
    branches:
      - main
  workflow_dispatch:
    inputs:
      publish_mode:
        description: 'Publishing mode'
        required: true
        default: 'changed'
        type: choice
        options:
          - changed
          - all
          - single
      solution_path:
        description: 'Specific solution to publish (only if mode=single, e.g., solutions/aws/ai/intelligent-document-processing)'
        required: false

jobs:
  detect-changes:
    name: Detect Changed Solutions
    runs-on: ubuntu-latest
    outputs:
      solutions: ${{ steps.detect.outputs.solutions }}
      has_changes: ${{ steps.detect.outputs.has_changes }}
    steps:
      - name: Checkout solutions repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed solutions
        id: detect
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger
            if [ "${{ inputs.publish_mode }}" = "all" ]; then
              echo "üì¶ Mode: Publish ALL solutions (initial setup)"
              SOLUTIONS=$(find solutions -mindepth 3 -maxdepth 3 -type d | \
                jq -R -s -c 'split("\n") | map(select(length > 0))')
              echo "solutions=$SOLUTIONS" >> $GITHUB_OUTPUT
              echo "has_changes=true" >> $GITHUB_OUTPUT
              echo "Total solutions to publish: $(echo $SOLUTIONS | jq 'length')"
            elif [ "${{ inputs.publish_mode }}" = "single" ] && [ -n "${{ inputs.solution_path }}" ]; then
              echo "üì¶ Mode: Publish single solution"
              echo "solutions=[\"${{ inputs.solution_path }}\"]" >> $GITHUB_OUTPUT
              echo "has_changes=true" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Error: Invalid workflow_dispatch configuration"
              exit 1
            fi
          else
            # Automatic trigger - detect changed solutions
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep '^solutions/' || true)

            if [ -z "$CHANGED_FILES" ]; then
              echo "has_changes=false" >> $GITHUB_OUTPUT
              echo "solutions=[]" >> $GITHUB_OUTPUT
              echo "‚ÑπÔ∏è No solution changes detected"
            else
              # Extract unique solution paths (provider/category/solution)
              SOLUTIONS=$(echo "$CHANGED_FILES" | \
                cut -d'/' -f1-4 | \
                sort -u | \
                jq -R -s -c 'split("\n") | map(select(length > 0))')

              echo "solutions=$SOLUTIONS" >> $GITHUB_OUTPUT
              echo "has_changes=true" >> $GITHUB_OUTPUT
              echo "üìã Changed solutions: $SOLUTIONS"
            fi
          fi

  publish-solutions:
    name: Sync Solutions to Public Assets (Batch)
    needs: detect-changes
    if: needs.detect-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout solutions repository
        uses: actions/checkout@v4
        with:
          path: solutions-repo
          fetch-depth: 0

      - name: Checkout public-assets repository
        uses: actions/checkout@v4
        with:
          repository: eoframework/public-assets
          token: ${{ secrets.PUBLIC_ASSETS_TOKEN }}
          path: public-assets
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Sync all changed solutions
        run: |
          cd solutions-repo

          SOLUTIONS='${{ needs.detect-changes.outputs.solutions }}'
          SOLUTION_COUNT=$(echo "$SOLUTIONS" | jq 'length')

          echo "üì¶ Syncing $SOLUTION_COUNT changed solution(s)..."
          echo ""

          # Loop through all changed solutions and sync them
          for solution in $(echo "$SOLUTIONS" | jq -r '.[]'); do
            echo "‚ñ∂ Processing: $solution"
            python3 support/tools/sync-solution.py \
              --solution "$solution" \
              --target "../public-assets" \
              --create-tag
            echo "‚úÖ Synced: $solution"
            echo ""
          done

          echo "‚úÖ All solutions synced successfully"

      - name: Batch commit and push to public-assets
        run: |
          cd public-assets

          # Configure git
          git config user.name "eof-publisher"
          git config user.email "publisher@eoframework.com"

          # Check for changes
          if git diff --quiet && git diff --staged --quiet; then
            echo "‚ÑπÔ∏è No changes to commit"
            exit 0
          fi

          # Get solution count and list
          SOLUTIONS='${{ needs.detect-changes.outputs.solutions }}'
          SOLUTION_COUNT=$(echo "$SOLUTIONS" | jq 'length')

          # Build commit message
          if [ "$SOLUTION_COUNT" -eq 1 ]; then
            # Single solution - use detailed message
            SOLUTION_PATH=$(echo "$SOLUTIONS" | jq -r '.[0]')
            METADATA_FILE="${SOLUTION_PATH}/metadata.yml"

            if [ -f "$METADATA_FILE" ]; then
              SOLUTION_NAME=$(python3 -c "import yaml; print(yaml.safe_load(open('$METADATA_FILE'))['solution_display_name'])" 2>/dev/null || echo "Solution")
              VERSION=$(python3 -c "import yaml; print(yaml.safe_load(open('$METADATA_FILE'))['version'])" 2>/dev/null || echo "1.0.0")
            else
              SOLUTION_NAME=$(basename "$SOLUTION_PATH")
              VERSION="1.0.0"
            fi

            COMMIT_TITLE="Publish ${SOLUTION_NAME} v${VERSION}"
          else
            # Multiple solutions - use batch message
            COMMIT_TITLE="Batch publish: ${SOLUTION_COUNT} solutions updated"
          fi

          # Commit all changes as one batch
          git add .
          git commit -m "$COMMIT_TITLE" \
            -m "Automated sync from solutions repository" \
            -m "Source: ${{ github.repository }}@${{ github.sha }}" \
            -m "" \
            -m "Changed solutions ($SOLUTION_COUNT):" \
            -m "$(echo "$SOLUTIONS" | jq -r '.[]')"

          # Push changes
          git pull --rebase origin main
          git push origin main
          echo "‚úÖ Pushed batch commit to main branch"

      - name: Create and push solution tags
        run: |
          cd public-assets

          # Configure git (in case it's a new shell)
          git config user.name "eof-publisher"
          git config user.email "publisher@eoframework.com"

          # Collect all tag files created by sync-solution.py
          TAG_FILES=$(find . -name ".tag-info" -type f)

          if [ -z "$TAG_FILES" ]; then
            echo "‚ÑπÔ∏è No tags to create"
            exit 0
          fi

          echo "üìã Processing solution tags..."
          TAG_COUNT=0

          # Process each tag file
          for tag_file in $TAG_FILES; do
            TAG_NAME=$(cat "$tag_file")
            rm "$tag_file"

            # Check if tag already exists
            if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
              echo "‚è≠Ô∏è  Tag already exists: $TAG_NAME"
            else
              # Extract solution info from tag name for tag message
              git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
              TAG_COUNT=$((TAG_COUNT + 1))
              echo "‚úÖ Created tag: $TAG_NAME"
            fi
          done

          # Push all tags at once
          if [ $TAG_COUNT -gt 0 ]; then
            git push origin --tags
            echo "‚úÖ Pushed $TAG_COUNT new tag(s)"
          else
            echo "‚ÑπÔ∏è No new tags to push"
          fi

  update-catalog:
    name: Update Solution Catalog
    needs: publish-solutions
    if: needs.detect-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout solutions repository
        uses: actions/checkout@v4
        with:
          path: solutions-repo

      - name: Checkout public-assets repository
        uses: actions/checkout@v4
        with:
          repository: eoframework/public-assets
          token: ${{ secrets.PUBLIC_ASSETS_TOKEN }}
          path: public-assets

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install pyyaml

      - name: Generate catalog CSV and JSON
        run: |
          cd solutions-repo
          python3 support/tools/export-templates-csv.py --output-type public --git-based

          # Copy catalog files to public-assets
          mkdir -p ../public-assets/catalog
          cp support/exports/solutions.csv ../public-assets/catalog/solutions.csv
          cp support/exports/solutions.json ../public-assets/catalog/solutions.json

      - name: Commit catalog updates
        run: |
          cd public-assets

          git config user.name "eof-publisher"
          git config user.email "publisher@eoframework.com"

          if git diff --quiet catalog/; then
            echo "‚ÑπÔ∏è No catalog changes"
            exit 0
          fi

          git add catalog/
          git commit -m "Update solution catalog" \
            -m "Automated catalog generation" \
            -m "Source: ${{ github.repository }}@${{ github.sha }}"

          git pull --rebase origin main
          git push origin main
          echo "‚úÖ Updated solution catalog"

  summary:
    name: Publishing Summary
    needs: [detect-changes, publish-solutions, update-catalog]
    if: always() && needs.detect-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Create summary
        run: |
          SOLUTIONS='${{ needs.detect-changes.outputs.solutions }}'
          SOLUTION_COUNT=$(echo "$SOLUTIONS" | jq 'length')

          echo "## üì¶ Solution Publishing Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Publishing Mode:** Batch (Git repository)" >> $GITHUB_STEP_SUMMARY
          echo "**Solutions Published:** $SOLUTION_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Published Components" >> $GITHUB_STEP_SUMMARY
          echo "- Solution folders synced in single batch commit" >> $GITHUB_STEP_SUMMARY
          echo "- Git tags created for version tracking" >> $GITHUB_STEP_SUMMARY
          echo "- Solution catalog updated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** https://github.com/eoframework/public-assets" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Changed Solutions" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "$SOLUTIONS" | jq -r '.[]' >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìñ User Access" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Clone with sparse checkout" >> $GITHUB_STEP_SUMMARY
          echo "git clone --filter=blob:none --sparse https://github.com/eoframework/public-assets" >> $GITHUB_STEP_SUMMARY
          echo "cd public-assets" >> $GITHUB_STEP_SUMMARY
          echo "git sparse-checkout set solutions/PROVIDER/CATEGORY/SOLUTION" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
