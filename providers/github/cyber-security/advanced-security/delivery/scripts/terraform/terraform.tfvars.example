# GitHub Advanced Security Platform - Terraform Variables Example
# Copy this file to terraform.tfvars and customize the values for your deployment

# Project Configuration
project_name = "github-advanced-security"
environment  = "dev"
aws_region   = "us-east-1"

# GitHub Configuration
github_organization = "your-organization-name"
# github_token = "ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"  # Set via environment variable or secure method

# Optional: GitHub App Configuration (recommended for production)
# github_app_id = "123456"
# github_app_private_key = "-----BEGIN RSA PRIVATE KEY-----\n...\n-----END RSA PRIVATE KEY-----"

# Network Configuration
vpc_cidr = "10.0.0.0/16"
availability_zones = [
  "us-east-1a",
  "us-east-1b"
]

# Public Subnets (for NAT Gateways and Load Balancers)
public_subnet_cidrs = [
  "10.0.1.0/24",
  "10.0.2.0/24"
]

# Private Subnets (for Security Monitoring Services)
private_subnet_cidrs = [
  "10.0.10.0/24",
  "10.0.20.0/24"
]

# Security Configuration
allowed_cidr_blocks = [
  "10.0.0.0/16"  # VPC CIDR
]

enable_encryption = true

# S3 Configuration
security_logs_bucket_name = ""  # Leave empty for auto-generated name
s3_force_destroy = false        # Set to true for non-production environments

# Monitoring and Logging
enable_detailed_monitoring = true
log_retention_days = 30
audit_log_retention_days = 2555  # 7 years for compliance

# Webhook Configuration
enable_webhook = true
# webhook_secret = "your-webhook-secret"  # Set via environment variable

# Dashboard Configuration
enable_dashboard = true
dashboard_name = ""  # Leave empty for auto-generated name

# Alert Configuration
enable_alarms = true
notification_email = "security-team@your-company.com"

# SIEM Integration Configuration
enable_splunk_integration = false
# splunk_hec_url = "https://your-splunk-instance.com:8088/services/collector"
# splunk_hec_token = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"

enable_azure_sentinel = false
# azure_sentinel_workspace_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
# azure_sentinel_shared_key = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

# Datadog Integration (optional)
# datadog_api_key = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
# datadog_app_key = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

# Security Scanning Configuration
enable_codeql = true
enable_secret_scanning = true
enable_dependency_scanning = true
security_scan_schedule = "0 2 * * *"  # Daily at 2 AM UTC

# Compliance Configuration
compliance_frameworks = [
  "SOC2",
  "PCI-DSS",
  "GDPR",
  "HIPAA"
]

enable_audit_logging = true

# Backup Configuration
enable_backup = true
backup_retention_days = 90

# Performance Configuration
security_monitoring_instance_type = "t3.medium"
auto_scaling_min_size = 1
auto_scaling_max_size = 10
auto_scaling_desired_capacity = 2

# Cost Optimization
use_spot_instances = false
# spot_price = "0.05"  # Maximum price per hour for Spot Instances

# Security Baseline Configuration
security_baseline_config = {
  require_2fa                = true
  max_inactive_days         = 90
  password_policy_enabled   = true
  branch_protection_enabled = true
  security_advisories_enabled = true
}

# Lambda Configuration
lambda_timeout = 300
lambda_memory_size = 256

# API Gateway Configuration
api_gateway_stage_name = "prod"
api_gateway_throttle_burst_limit = 1000
api_gateway_throttle_rate_limit = 500

# Custom Security Rules (optional)
# custom_security_rules = [
#   {
#     name        = "Hardcoded Credentials"
#     description = "Detect hardcoded credentials in code"
#     severity    = "HIGH"
#     query       = "SELECT * FROM code_analysis WHERE pattern LIKE '%password%' AND pattern LIKE '%=%'"
#   },
#   {
#     name        = "Insecure HTTP"
#     description = "Detect insecure HTTP connections"
#     severity    = "MEDIUM"
#     query       = "SELECT * FROM code_analysis WHERE pattern LIKE '%http://%'"
#   }
# ]

# Resource Tags
tags = {
  Project     = "github-advanced-security"
  Environment = "dev"
  Owner       = "security-team"
  ManagedBy   = "terraform"
  CostCenter  = "security"
  Purpose     = "security-monitoring"
  Compliance  = "required"
}

# Example Production Configuration
# Uncomment and modify for production deployment:

# project_name = "github-security-prod"
# environment = "production"
# 
# # Enhanced security and monitoring
# enable_detailed_monitoring = true
# log_retention_days = 90
# audit_log_retention_days = 2555
# backup_retention_days = 365
# 
# # High availability
# availability_zones = ["us-east-1a", "us-east-1b", "us-east-1c"]
# auto_scaling_min_size = 3
# auto_scaling_max_size = 20
# auto_scaling_desired_capacity = 5
# security_monitoring_instance_type = "t3.large"
# 
# # Enhanced security scanning
# enable_codeql = true
# enable_secret_scanning = true
# enable_dependency_scanning = true
# security_scan_schedule = "0 1,13 * * *"  # Twice daily
# 
# # SIEM Integration
# enable_splunk_integration = true
# enable_azure_sentinel = true
# 
# # Compliance and audit
# compliance_frameworks = ["SOC2", "PCI-DSS", "GDPR", "HIPAA", "FedRAMP"]
# enable_audit_logging = true
# 
# # Alert configuration
# enable_alarms = true
# notification_email = "security-alerts@company.com"
# 
# # Security baseline
# security_baseline_config = {
#   require_2fa                = true
#   max_inactive_days         = 30
#   password_policy_enabled   = true
#   branch_protection_enabled = true
#   security_advisories_enabled = true
# }
# 
# # Production tags
# tags = {
#   Project     = "github-security-prod"
#   Environment = "production"
#   Owner       = "security-team"
#   ManagedBy   = "terraform"
#   CostCenter  = "security"
#   Purpose     = "security-monitoring"
#   Compliance  = "required"
#   Backup      = "required"
#   DataClass   = "confidential"
# }

# Development/Testing Configuration
# For development and testing environments:

# project_name = "github-security-dev"
# environment = "dev"
# 
# # Reduced capacity for cost savings
# auto_scaling_min_size = 0
# auto_scaling_max_size = 3
# auto_scaling_desired_capacity = 1
# security_monitoring_instance_type = "t3.small"
# use_spot_instances = true
# spot_price = "0.03"
# 
# # Shorter retention for cost savings
# log_retention_days = 7
# backup_retention_days = 30
# 
# # Allow bucket destruction for easy cleanup
# s3_force_destroy = true
# 
# # Basic scanning schedule
# security_scan_schedule = "0 8 * * 1"  # Weekly on Monday
# 
# # Development tags
# tags = {
#   Project     = "github-security-dev"
#   Environment = "dev"
#   Owner       = "security-team"
#   ManagedBy   = "terraform"
#   Purpose     = "development"
#   AutoShutdown = "enabled"
# }

# Staging Configuration
# For staging environments:

# project_name = "github-security-staging"
# environment = "staging"
# 
# # Production-like but smaller scale
# auto_scaling_min_size = 1
# auto_scaling_max_size = 5
# auto_scaling_desired_capacity = 2
# security_monitoring_instance_type = "t3.medium"
# 
# # Moderate retention
# log_retention_days = 30
# backup_retention_days = 60
# 
# # Production-like scanning
# security_scan_schedule = "0 2 * * *"  # Daily at 2 AM
# 
# # Enable most features for testing
# enable_webhook = true
# enable_dashboard = true
# enable_alarms = true
# 
# # Staging tags
# tags = {
#   Project     = "github-security-staging"
#   Environment = "staging"
#   Owner       = "security-team"
#   ManagedBy   = "terraform"
#   Purpose     = "staging"
#   DataClass   = "internal"
# }