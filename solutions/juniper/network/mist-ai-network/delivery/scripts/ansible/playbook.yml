---
# Ansible Playbook for Juniper Mist AI Network Platform Deployment
# This playbook automates the deployment and configuration of Mist AI Network Platform
# including site creation, WLAN configuration, device management, and validation.

- name: Deploy Juniper Mist AI Network Platform
  hosts: localhost
  connection: local
  gather_facts: false
  
  vars:
    # Mist API Configuration
    mist_api_base_url: "{{ mist_api_host | default('https://api.mist.com') }}"
    mist_api_version: "v1"
    mist_api_headers:
      Authorization: "Token {{ mist_api_token }}"
      Content-Type: "application/json"
      User-Agent: "Ansible-Mist-Deploy/1.0"
    
    # Retry configuration
    api_retry_count: 3
    api_retry_delay: 5
    
    # Default network configuration
    default_networks:
      corporate:
        vlan_id: "{{ corporate_vlan_id | default(100) }}"
        subnet: "{{ corporate_subnet | default('10.100.0.0/24') }}"
        gateway: "{{ corporate_gateway | default('10.100.0.1') }}"
      guest:
        vlan_id: "{{ guest_vlan_id | default(200) }}"
        subnet: "{{ guest_subnet | default('10.200.0.0/24') }}"
        gateway: "{{ guest_gateway | default('10.200.0.1') }}"
      iot:
        vlan_id: "{{ iot_vlan_id | default(400) }}"
        subnet: "{{ iot_subnet | default('10.400.0.0/24') }}"
        gateway: "{{ iot_gateway | default('10.400.0.1') }}"
    
    # WLAN templates
    wlan_templates:
      corporate:
        ssid: "{{ corporate_ssid | default('Corporate-WiFi') }}"
        enabled: true
        auth:
          type: "eap"
          eap_reauth: true
        vlan_enabled: true
        vlan_id: "{{ corporate_vlan_id | default(100) }}"
        interface: "corporate"
        band_steer: true
        roam_mode: "OKC"
        
      guest:
        ssid: "{{ guest_ssid | default('Guest-WiFi') }}"
        enabled: true
        auth:
          type: "open"
        vlan_enabled: true
        vlan_id: "{{ guest_vlan_id | default(200) }}"
        interface: "guest"
        portal:
          enabled: true
          forward_url: "{{ guest_portal_forward_url | default('https://www.company.com') }}"
        isolation: true
        wlan_limit_up: "{{ (guest_bandwidth_limit_mbps | default(10)) * 1000000 }}"
        wlan_limit_down: "{{ (guest_bandwidth_limit_mbps | default(10)) * 1000000 }}"
        
      iot:
        ssid: "{{ iot_ssid | default('IoT-Devices') }}"
        enabled: true
        hide_ssid: true
        auth:
          type: "psk"
          psk: "{{ iot_psk }}"
        vlan_enabled: true
        vlan_id: "{{ iot_vlan_id | default(400) }}"
        interface: "iot"
        isolation: true
        band_steer: false
        disable_11ax: true
        wlan_limit_up: 5000000  # 5 Mbps
        wlan_limit_down: 5000000

  tasks:
    - name: Validate required variables
      ansible.builtin.assert:
        that:
          - mist_api_token is defined
          - organization_name is defined
          - sites is defined
          - sites | length > 0
        fail_msg: "Required variables not defined. Please check your configuration."
        success_msg: "Required variables validation passed"

    - name: Validate API token
      ansible.builtin.uri:
        url: "{{ mist_api_base_url }}/api/{{ mist_api_version }}/self"
        method: GET
        headers: "{{ mist_api_headers }}"
        status_code: 200
      register: api_validation
      retries: "{{ api_retry_count }}"
      delay: "{{ api_retry_delay }}"

    - name: Display API validation result
      ansible.builtin.debug:
        msg: "API token validated successfully for {{ api_validation.json.email | default('user') }}"

    - name: Get organization information
      ansible.builtin.uri:
        url: "{{ mist_api_base_url }}/api/{{ mist_api_version }}/orgs"
        method: GET
        headers: "{{ mist_api_headers }}"
        status_code: 200
      register: organizations_response
      retries: "{{ api_retry_count }}"
      delay: "{{ api_retry_delay }}"

    - name: Find target organization
      ansible.builtin.set_fact:
        target_org: "{{ organizations_response.json | selectattr('name', 'equalto', organization_name) | first }}"
      failed_when: target_org is not defined

    - name: Display organization information
      ansible.builtin.debug:
        msg: "Found organization: {{ target_org.name }} (ID: {{ target_org.id }})"

    - name: Get existing sites
      ansible.builtin.uri:
        url: "{{ mist_api_base_url }}/api/{{ mist_api_version }}/orgs/{{ target_org.id }}/sites"
        method: GET
        headers: "{{ mist_api_headers }}"
        status_code: 200
      register: existing_sites_response
      retries: "{{ api_retry_count }}"
      delay: "{{ api_retry_delay }}"

    - name: Create site name to ID mapping
      ansible.builtin.set_fact:
        existing_sites_map: "{{ existing_sites_map | default({}) | combine({item.name: item}) }}"
      loop: "{{ existing_sites_response.json }}"

    - name: Deploy sites
      include_tasks: tasks/deploy_site.yml
      vars:
        site_name: "{{ item.key }}"
        site_config: "{{ item.value }}"
        org_id: "{{ target_org.id }}"
        existing_site: "{{ existing_sites_map[item.key] | default(None) }}"
      loop: "{{ sites | dict2items }}"
      loop_control:
        label: "{{ item.key }}"

    - name: Wait for sites to be ready
      ansible.builtin.pause:
        seconds: 10
        prompt: "Waiting for sites to be ready..."

    - name: Get updated site information
      ansible.builtin.uri:
        url: "{{ mist_api_base_url }}/api/{{ mist_api_version }}/orgs/{{ target_org.id }}/sites"
        method: GET
        headers: "{{ mist_api_headers }}"
        status_code: 200
      register: updated_sites_response
      retries: "{{ api_retry_count }}"
      delay: "{{ api_retry_delay }}"

    - name: Create updated site mapping
      ansible.builtin.set_fact:
        deployed_sites_map: "{{ deployed_sites_map | default({}) | combine({item.name: item}) }}"
      loop: "{{ updated_sites_response.json }}"

    - name: Deploy WLANs for each site
      include_tasks: tasks/deploy_wlans.yml
      vars:
        site_name: "{{ item.key }}"
        site_config: "{{ item.value }}"
        site_info: "{{ deployed_sites_map[item.key] }}"
      loop: "{{ sites | dict2items }}"
      loop_control:
        label: "{{ item.key }}"
      when: deployed_sites_map[item.key] is defined

    - name: Claim devices if specified
      include_tasks: tasks/claim_devices.yml
      vars:
        org_id: "{{ target_org.id }}"
      when: 
        - devices is defined
        - devices.claim_codes is defined
        - devices.claim_codes | length > 0

    - name: Configure devices
      include_tasks: tasks/configure_devices.yml
      vars:
        org_id: "{{ target_org.id }}"
      when:
        - device_configs is defined
        - device_configs | length > 0

    - name: Wait for deployment to settle
      ansible.builtin.pause:
        seconds: 30
        prompt: "Waiting for deployment to settle..."

    - name: Verify deployment
      include_tasks: tasks/verify_deployment.yml
      vars:
        org_id: "{{ target_org.id }}"

    - name: Generate deployment summary
      include_tasks: tasks/deployment_summary.yml

# Task files for modular deployment

# File: tasks/deploy_site.yml
- name: Check if site exists
  ansible.builtin.set_fact:
    site_exists: "{{ existing_site is not none }}"

- name: Create new site
  ansible.builtin.uri:
    url: "{{ mist_api_base_url }}/api/{{ mist_api_version }}/orgs/{{ org_id }}/sites"
    method: POST
    headers: "{{ mist_api_headers }}"
    body_format: json
    body:
      name: "{{ site_name }}"
      address: "{{ site_config.address }}"
      country_code: "{{ site_config.country_code }}"
      timezone: "{{ site_config.timezone }}"
      latlng: 
        lat: "{{ site_config.latitude | default(0) }}"
        lng: "{{ site_config.longitude | default(0) }}"
      site_settings:
        rtls:
          enabled: "{{ site_config.rtls_enabled | default(false) }}"
        location_engine:
          enabled: "{{ site_config.location_services_enabled | default(true) }}"
        analytic:
          enabled: "{{ site_config.analytics_enabled | default(true) }}"
        wifi:
          enabled: true
          mesh_enabled: "{{ site_config.mesh_enabled | default(false) }}"
          proxy_arp: "default"
        auto_upgrade:
          enabled: "{{ site_config.auto_upgrade_enabled | default(true) }}"
          time_of_day: "{{ site_config.auto_upgrade_time | default('02:00') }}"
          day_of_week: "{{ site_config.auto_upgrade_day | default('sun') }}"
      networks: "{{ default_networks }}"
    status_code: 200
  register: create_site_result
  retries: "{{ api_retry_count }}"
  delay: "{{ api_retry_delay }}"
  when: not site_exists

- name: Update existing site
  ansible.builtin.uri:
    url: "{{ mist_api_base_url }}/api/{{ mist_api_version }}/sites/{{ existing_site.id }}"
    method: PUT
    headers: "{{ mist_api_headers }}"
    body_format: json
    body:
      name: "{{ site_name }}"
      address: "{{ site_config.address }}"
      country_code: "{{ site_config.country_code }}"
      timezone: "{{ site_config.timezone }}"
      latlng:
        lat: "{{ site_config.latitude | default(existing_site.latlng.lat | default(0)) }}"
        lng: "{{ site_config.longitude | default(existing_site.latlng.lng | default(0)) }}"
    status_code: 200
  register: update_site_result
  retries: "{{ api_retry_count }}"
  delay: "{{ api_retry_delay }}"
  when: site_exists

- name: Record site deployment
  ansible.builtin.set_fact:
    deployed_sites: "{{ deployed_sites | default([]) + [site_operation_result.json] }}"
  vars:
    site_operation_result: "{{ create_site_result if not site_exists else update_site_result }}"

- name: Display site deployment result
  ansible.builtin.debug:
    msg: "{{ 'Created' if not site_exists else 'Updated' }} site: {{ site_name }}"

# File: tasks/deploy_wlans.yml
- name: Get existing WLANs for site
  ansible.builtin.uri:
    url: "{{ mist_api_base_url }}/api/{{ mist_api_version }}/sites/{{ site_info.id }}/wlans"
    method: GET
    headers: "{{ mist_api_headers }}"
    status_code: 200
  register: existing_wlans_response
  retries: "{{ api_retry_count }}"
  delay: "{{ api_retry_delay }}"

- name: Create WLAN mapping for site
  ansible.builtin.set_fact:
    existing_wlans_map: "{{ existing_wlans_map | default({}) | combine({item.ssid: item}) }}"
  loop: "{{ existing_wlans_response.json }}"

- name: Deploy corporate WLAN
  ansible.builtin.uri:
    url: "{{ mist_api_base_url }}/api/{{ mist_api_version }}/sites/{{ site_info.id }}/wlans"
    method: POST
    headers: "{{ mist_api_headers }}"
    body_format: json
    body: "{{ wlan_templates.corporate | combine({'auth_servers': radius_auth_servers | default([]), 'acct_servers': radius_accounting_servers | default([])}) }}"
    status_code: 200
  register: corporate_wlan_result
  retries: "{{ api_retry_count }}"
  delay: "{{ api_retry_delay }}"
  when: wlan_templates.corporate.ssid not in (existing_wlans_map.keys() | list)

- name: Deploy guest WLAN
  ansible.builtin.uri:
    url: "{{ mist_api_base_url }}/api/{{ mist_api_version }}/sites/{{ site_info.id }}/wlans"
    method: POST
    headers: "{{ mist_api_headers }}"
    body_format: json
    body: "{{ wlan_templates.guest }}"
    status_code: 200
  register: guest_wlan_result
  retries: "{{ api_retry_count }}"
  delay: "{{ api_retry_delay }}"
  when: wlan_templates.guest.ssid not in (existing_wlans_map.keys() | list)

- name: Deploy IoT WLAN
  ansible.builtin.uri:
    url: "{{ mist_api_base_url }}/api/{{ mist_api_version }}/sites/{{ site_info.id }}/wlans"
    method: POST
    headers: "{{ mist_api_headers }}"
    body_format: json
    body: "{{ wlan_templates.iot }}"
    status_code: 200
  register: iot_wlan_result
  retries: "{{ api_retry_count }}"
  delay: "{{ api_retry_delay }}"
  when: 
    - iot_psk is defined
    - iot_psk | length > 0
    - wlan_templates.iot.ssid not in (existing_wlans_map.keys() | list)

- name: Record WLAN deployments
  ansible.builtin.set_fact:
    deployed_wlans: "{{ deployed_wlans | default([]) + wlan_results }}"
  vars:
    wlan_results: >-
      {{ 
        ([corporate_wlan_result.json] if corporate_wlan_result is not skipped else []) +
        ([guest_wlan_result.json] if guest_wlan_result is not skipped else []) +
        ([iot_wlan_result.json] if iot_wlan_result is not skipped else [])
      }}

# File: tasks/claim_devices.yml
- name: Claim devices with claim codes
  ansible.builtin.uri:
    url: "{{ mist_api_base_url }}/api/{{ mist_api_version }}/orgs/{{ org_id }}/inventory"
    method: POST
    headers: "{{ mist_api_headers }}"
    body_format: json
    body: "{{ devices.claim_codes }}"
    status_code: 200
  register: claim_devices_result
  retries: "{{ api_retry_count }}"
  delay: "{{ api_retry_delay }}"

- name: Display claimed devices
  ansible.builtin.debug:
    msg: "Successfully claimed {{ devices.claim_codes | length }} devices"

- name: Assign devices to sites
  ansible.builtin.uri:
    url: "{{ mist_api_base_url }}/api/{{ mist_api_version }}/orgs/{{ org_id }}/inventory/{{ item.device_id }}"
    method: PUT
    headers: "{{ mist_api_headers }}"
    body_format: json
    body:
      site_id: "{{ deployed_sites_map[item.site].id }}"
    status_code: 200
  register: assign_device_result
  retries: "{{ api_retry_count }}"
  delay: "{{ api_retry_delay }}"
  loop: "{{ devices.assignments | default([]) }}"
  loop_control:
    label: "{{ item.device_id }} -> {{ item.site }}"
  when: deployed_sites_map[item.site] is defined

# File: tasks/configure_devices.yml
- name: Configure individual devices
  ansible.builtin.uri:
    url: "{{ mist_api_base_url }}/api/{{ mist_api_version }}/sites/{{ deployed_sites_map[item.site].id }}/devices/{{ item.device_id }}"
    method: PUT
    headers: "{{ mist_api_headers }}"
    body_format: json
    body: "{{ item.config }}"
    status_code: 200
  register: configure_device_result
  retries: "{{ api_retry_count }}"
  delay: "{{ api_retry_delay }}"
  loop: "{{ device_configs }}"
  loop_control:
    label: "{{ item.device_id }} in {{ item.site }}"
  when: deployed_sites_map[item.site] is defined

- name: Record configured devices
  ansible.builtin.set_fact:
    configured_devices: "{{ configured_devices | default([]) + [item] }}"
  loop: "{{ device_configs }}"
  when: deployed_sites_map[item.site] is defined

# File: tasks/verify_deployment.yml
- name: Get devices for each deployed site
  ansible.builtin.uri:
    url: "{{ mist_api_base_url }}/api/{{ mist_api_version }}/sites/{{ item.id }}/devices"
    method: GET
    headers: "{{ mist_api_headers }}"
    status_code: 200
  register: site_devices_response
  retries: "{{ api_retry_count }}"
  delay: "{{ api_retry_delay }}"
  loop: "{{ deployed_sites | default([]) }}"
  loop_control:
    label: "{{ item.name }}"

- name: Check device connectivity
  ansible.builtin.uri:
    url: "{{ mist_api_base_url }}/api/{{ mist_api_version }}/sites/{{ site_info.id }}/stats/devices/{{ device.id }}"
    method: GET
    headers: "{{ mist_api_headers }}"
    status_code: [200, 404]  # 404 is acceptable for new devices
  register: device_status_response
  retries: 2
  delay: 5
  vars:
    site_info: "{{ deployed_sites[ansible_loop.index0] }}"
    site_devices: "{{ site_devices_response.results[ansible_loop.index0].json }}"
  loop: "{{ site_devices }}"
  loop_control:
    loop_var: device
    label: "{{ device.name | default(device.id) }} in {{ site_info.name }}"
  ignore_errors: true

- name: Summarize device connectivity
  ansible.builtin.set_fact:
    device_connectivity_summary: "{{ device_connectivity_summary | default({}) | combine({site_info.name: site_summary}) }}"
  vars:
    site_info: "{{ deployed_sites[ansible_loop.index0] }}"
    site_devices: "{{ site_devices_response.results[ansible_loop.index0].json }}"
    connected_devices: "{{ device_status_response.results | selectattr('status', 'equalto', 200) | selectattr('json.status', 'defined') | selectattr('json.status', 'equalto', 'connected') | list | length }}"
    total_devices: "{{ site_devices | length }}"
    site_summary:
      total_devices: "{{ total_devices }}"
      connected_devices: "{{ connected_devices }}"
      connection_rate: "{{ (connected_devices / total_devices * 100) | round(1) if total_devices > 0 else 0 }}"
  loop: "{{ deployed_sites | default([]) }}"
  loop_control:
    label: "{{ item.name }}"

# File: tasks/deployment_summary.yml
- name: Display deployment summary
  ansible.builtin.debug:
    msg: |
      =====================================
      MIST AI NETWORK DEPLOYMENT SUMMARY
      =====================================
      
      Organization: {{ target_org.name }} ({{ target_org.id }})
      
      Sites Deployed: {{ deployed_sites | default([]) | length }}
      {% for site in deployed_sites | default([]) %}
      - {{ site.name }} ({{ site.id }})
      {% endfor %}
      
      WLANs Deployed: {{ deployed_wlans | default([]) | length }}
      {% for wlan in deployed_wlans | default([]) %}
      - {{ wlan.ssid }} ({{ wlan.id }})
      {% endfor %}
      
      Devices Claimed: {{ devices.claim_codes | default([]) | length }}
      Devices Configured: {{ configured_devices | default([]) | length }}
      
      Device Connectivity Summary:
      {% for site_name, connectivity in device_connectivity_summary.items() %}
      - {{ site_name }}: {{ connectivity.connected_devices }}/{{ connectivity.total_devices }} devices online ({{ connectivity.connection_rate }}%)
      {% endfor %}
      
      Deployment completed at: {{ ansible_date_time.iso8601 }}
      =====================================

- name: Write deployment results to file
  ansible.builtin.copy:
    content: |
      # Mist AI Network Deployment Results
      
      **Deployment Date:** {{ ansible_date_time.iso8601 }}
      **Organization:** {{ target_org.name }} ({{ target_org.id }})
      
      ## Sites Deployed ({{ deployed_sites | default([]) | length }})
      {% for site in deployed_sites | default([]) %}
      - **{{ site.name }}** (ID: {{ site.id }})
        - Address: {{ site.address }}
        - Timezone: {{ site.timezone }}
      {% endfor %}
      
      ## WLANs Deployed ({{ deployed_wlans | default([]) | length }})
      {% for wlan in deployed_wlans | default([]) %}
      - **{{ wlan.ssid }}** (ID: {{ wlan.id }})
        - VLAN: {{ wlan.vlan_id }}
        - Enabled: {{ wlan.enabled }}
      {% endfor %}
      
      ## Device Summary
      - **Devices Claimed:** {{ devices.claim_codes | default([]) | length }}
      - **Devices Configured:** {{ configured_devices | default([]) | length }}
      
      ## Connectivity Status
      {% for site_name, connectivity in device_connectivity_summary.items() %}
      - **{{ site_name }}:** {{ connectivity.connected_devices }}/{{ connectivity.total_devices }} devices online ({{ connectivity.connection_rate }}%)
      {% endfor %}
      
      ## Management URLs
      - **Mist Dashboard:** https://manage.mist.com/admin/?org_id={{ target_org.id }}
      - **API Documentation:** https://api.mist.com/api/v1/docs
      - **Support Portal:** https://support.juniper.net
      
      ## Next Steps
      1. Access the Mist Dashboard to monitor deployment
      2. Verify all devices are online and properly configured
      3. Test WLAN connectivity from client devices
      4. Configure additional features as needed
      5. Set up monitoring and alerting
    dest: "./mist_deployment_results_{{ ansible_date_time.epoch }}.md"
    mode: '0644'
  delegate_to: localhost

- name: Deployment completed successfully
  ansible.builtin.debug:
    msg: "Mist AI Network Platform deployment completed successfully!"