---
# Cisco SD-WAN Enterprise Deployment Playbook
# This playbook automates the deployment and configuration of Cisco SD-WAN enterprise infrastructure
# including vEdge routers, vSmart controllers, vManage orchestration, and WAN policies.

- name: Cisco SD-WAN Enterprise Deployment
  hosts: all
  gather_facts: true
  become: false
  vars:
    deployment_timestamp: "{{ ansible_date_time.epoch }}"
    backup_dir: "/tmp/sdwan_backups/{{ deployment_timestamp }}"
    
  tasks:
    - name: Create backup directory
      file:
        path: "{{ backup_dir }}"
        state: directory
        mode: '0755'
      delegate_to: localhost
      run_once: true

    - name: Display deployment banner
      debug:
        msg: |
          ================================================================
          Cisco SD-WAN Enterprise Deployment Starting
          Timestamp: {{ ansible_date_time.iso8601 }}
          Target Devices: {{ ansible_play_hosts | length }}
          ================================================================

# vManage Configuration
- name: Configure vManage Orchestrator
  hosts: vmanage
  gather_facts: false
  vars:
    vmanage_config:
      system_ip: "{{ hostvars[inventory_hostname]['system_ip'] }}"
      site_id: "{{ hostvars[inventory_hostname]['site_id'] | default(1) }}"
      organization: "{{ sdwan_organization | default('SDWAN-Enterprise') }}"
      
  tasks:
    - name: Verify vManage connectivity
      wait_for:
        host: "{{ inventory_hostname }}"
        port: 443
        timeout: 30
      delegate_to: localhost

    - name: Backup current vManage configuration
      uri:
        url: "https://{{ inventory_hostname }}:443/dataservice/admin/settings"
        method: GET
        user: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        validate_certs: false
        headers:
          Content-Type: "application/json"
      register: vmanage_backup
      delegate_to: localhost

    - name: Save vManage backup
      copy:
        content: "{{ vmanage_backup.json | to_nice_json }}"
        dest: "{{ backup_dir }}/vmanage_{{ inventory_hostname }}_backup.json"
      delegate_to: localhost

    - name: Configure vManage system settings
      uri:
        url: "https://{{ inventory_hostname }}:443/dataservice/admin/settings"
        method: PUT
        user: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        validate_certs: false
        body_format: json
        body:
          organizationName: "{{ vmanage_config.organization }}"
          domainIP: "{{ vmanage_config.system_ip }}"
          port: 12346
          enterpriseRootCA: true
        headers:
          Content-Type: "application/json"
      register: vmanage_response

    - name: Configure vManage certificate authority
      uri:
        url: "https://{{ inventory_hostname }}:443/dataservice/certificate/enterprise/rootcertificate"
        method: POST
        user: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        validate_certs: false
        body_format: json
        body:
          enterpriseRootCA: "{{ sdwan_root_ca | default('auto-generate') }}"
        headers:
          Content-Type: "application/json"
      when: sdwan_root_ca is defined

    - name: Wait for vManage initialization
      pause:
        seconds: 30

# vSmart Controllers Configuration
- name: Configure vSmart Controllers  
  hosts: vsmart
  gather_facts: false
  vars:
    vsmart_config:
      system_ip: "{{ hostvars[inventory_hostname]['system_ip'] }}"
      site_id: "{{ hostvars[inventory_hostname]['site_id'] | default(100) }}"
      
  tasks:
    - name: Verify vSmart connectivity
      wait_for:
        host: "{{ inventory_hostname }}"
        port: 830
        timeout: 30
      delegate_to: localhost

    - name: Configure vSmart system parameters
      cisco.ios.ios_config:
        lines:
          - system
          - system-ip {{ vsmart_config.system_ip }}
          - site-id {{ vsmart_config.site_id }}
          - organization-name {{ sdwan_organization | default('SDWAN-Enterprise') }}
          - vbond {{ groups['vbond'][0] }}
        parents: config-transaction
        before: config-transaction
        after: commit
      vars:
        ansible_network_os: ios

    - name: Configure vSmart OMP settings
      cisco.ios.ios_config:
        lines:
          - omp
          - no shutdown
          - graceful-restart
          - advertise connected
          - advertise static
        parents: config-transaction
        before: config-transaction
        after: commit

    - name: Configure vSmart control connections
      cisco.ios.ios_config:
        lines:
          - control-plane
          - tunnel-interface
          - encapsulation ipsec
          - no shutdown
        parents: config-transaction
        before: config-transaction
        after: commit

# vEdge Router Configuration
- name: Configure vEdge Routers
  hosts: vedge
  gather_facts: false
  vars:
    vedge_config:
      system_ip: "{{ hostvars[inventory_hostname]['system_ip'] }}"
      site_id: "{{ hostvars[inventory_hostname]['site_id'] }}"
      
  tasks:
    - name: Backup vEdge configuration
      cisco.ios.ios_command:
        commands:
          - show running-config
      register: vedge_backup
      vars:
        ansible_network_os: ios

    - name: Save vEdge backup
      copy:
        content: "{{ vedge_backup.stdout[0] }}"
        dest: "{{ backup_dir }}/vedge_{{ inventory_hostname }}_backup.cfg"
      delegate_to: localhost

    - name: Configure vEdge system parameters
      cisco.ios.ios_config:
        lines:
          - system
          - system-ip {{ vedge_config.system_ip }}
          - site-id {{ vedge_config.site_id }}
          - organization-name {{ sdwan_organization | default('SDWAN-Enterprise') }}
          - vbond {{ groups['vbond'][0] }}
          - logging
          - disk enable
        parents: config-transaction
        before: config-transaction
        after: commit

    - name: Configure WAN interfaces
      cisco.ios.ios_config:
        lines:
          - interface {{ item.interface }}
          - tunnel-interface
          - encapsulation {{ item.encapsulation | default('ipsec') }}
          - color {{ item.color }}
          - "{% if item.carrier is defined %}carrier {{ item.carrier }}{% endif %}"
          - "{% if item.bandwidth is defined %}bandwidth {{ item.bandwidth }}{% endif %}"
          - no shutdown
        parents: config-transaction
        before: config-transaction
        after: commit
      loop: "{{ wan_interfaces }}"
      when: wan_interfaces is defined

    - name: Configure LAN interfaces
      cisco.ios.ios_config:
        lines:
          - interface {{ item.interface }}
          - ip address {{ item.ip_address }} {{ item.subnet_mask }}
          - no shutdown
        parents: config-transaction
        before: config-transaction
        after: commit
      loop: "{{ lan_interfaces }}"
      when: lan_interfaces is defined

# Policy Configuration
- name: Deploy SD-WAN Policies
  hosts: vmanage
  gather_facts: false
  tasks:
    - name: Create site lists
      uri:
        url: "https://{{ inventory_hostname }}:443/dataservice/template/policy/list/site"
        method: POST
        user: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        validate_certs: false
        body_format: json
        body:
          name: "{{ item.name }}"
          description: "{{ item.description }}"
          type: "site"
          listId: "{{ item.list_id }}"
          entries: "{{ item.sites }}"
        headers:
          Content-Type: "application/json"
      loop: "{{ site_lists }}"
      when: site_lists is defined

    - name: Create application lists  
      uri:
        url: "https://{{ inventory_hostname }}:443/dataservice/template/policy/list/app"
        method: POST
        user: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        validate_certs: false
        body_format: json
        body:
          name: "{{ item.name }}"
          description: "{{ item.description }}"
          type: "app"
          listId: "{{ item.list_id }}"
          entries: "{{ item.applications }}"
        headers:
          Content-Type: "application/json"
      loop: "{{ application_lists }}"
      when: application_lists is defined

    - name: Deploy centralized policies
      uri:
        url: "https://{{ inventory_hostname }}:443/dataservice/template/policy/vedge"
        method: POST
        user: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        validate_certs: false
        body_format: json
        body:
          policyName: "{{ item.name }}"
          policyDescription: "{{ item.description }}"
          policyType: "vedge"
          policyDefinition: "{{ item.definition }}"
        headers:
          Content-Type: "application/json"
      loop: "{{ centralized_policies }}"
      when: centralized_policies is defined

# Certificate Management
- name: Manage SD-WAN Certificates
  hosts: vmanage
  gather_facts: false
  tasks:
    - name: Generate device certificates
      uri:
        url: "https://{{ inventory_hostname }}:443/dataservice/certificate/generate/vedge"
        method: POST
        user: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        validate_certs: false
        body_format: json
        body:
          deviceIP: "{{ item.system_ip }}"
          chassisNumber: "{{ item.chassis_number }}"
          serialNumber: "{{ item.serial_number }}"
        headers:
          Content-Type: "application/json"
      loop: "{{ vedge_devices }}"
      when: vedge_devices is defined

    - name: Validate certificate deployment
      uri:
        url: "https://{{ inventory_hostname }}:443/dataservice/certificate/vedge/list"
        method: GET
        user: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        validate_certs: false
        headers:
          Content-Type: "application/json"
      register: certificate_status

# Monitoring and Verification
- name: Verify SD-WAN Deployment
  hosts: all
  gather_facts: false
  tasks:
    - name: Verify control connections
      cisco.ios.ios_command:
        commands:
          - show control connections
      register: control_connections
      when: inventory_hostname in groups['vedge'] or inventory_hostname in groups['vsmart']

    - name: Verify OMP peers
      cisco.ios.ios_command:
        commands:
          - show omp peers
      register: omp_peers  
      when: inventory_hostname in groups['vedge'] or inventory_hostname in groups['vsmart']

    - name: Display verification results
      debug:
        msg: |
          Device: {{ inventory_hostname }}
          Control Connections: {{ control_connections.stdout[0] if control_connections is defined else 'N/A' }}
          OMP Peers: {{ omp_peers.stdout[0] if omp_peers is defined else 'N/A' }}

# Final Deployment Report
- name: Generate Deployment Report
  hosts: localhost
  gather_facts: true
  tasks:
    - name: Create deployment report
      template:
        src: deployment_report.j2
        dest: "{{ backup_dir }}/deployment_report.html"
      vars:
        deployment_summary:
          timestamp: "{{ ansible_date_time.iso8601 }}"
          total_devices: "{{ groups['all'] | length }}"
          vmanage_count: "{{ groups['vmanage'] | default([]) | length }}"
          vsmart_count: "{{ groups['vsmart'] | default([]) | length }}"
          vedge_count: "{{ groups['vedge'] | default([]) | length }}"
          backup_location: "{{ backup_dir }}"

    - name: Display deployment summary
      debug:
        msg: |
          ================================================================
          Cisco SD-WAN Enterprise Deployment Complete
          Total Devices Configured: {{ groups['all'] | length }}
          vManage Controllers: {{ groups['vmanage'] | default([]) | length }}
          vSmart Controllers: {{ groups['vsmart'] | default([]) | length }}
          vEdge Routers: {{ groups['vedge'] | default([]) | length }}
          Backup Location: {{ backup_dir }}
          ================================================================