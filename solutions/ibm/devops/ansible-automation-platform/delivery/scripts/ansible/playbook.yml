---
# IBM Ansible Automation Platform - Deployment Playbook
# This playbook deploys and configures IBM Ansible Automation Platform on Red Hat OpenShift

- name: Deploy IBM Ansible Automation Platform
  hosts: localhost
  gather_facts: true
  vars:
    # Default variables
    project_name: "ansible-automation-platform"
    environment: "prod"
    openshift_namespace: "ansible-automation"
    aap_version: "2.4"
    
    # Platform Configuration
    automation_controller_replicas: 3
    automation_hub_replicas: 2
    eda_controller_replicas: 2
    
    # Database Configuration
    postgresql_version: "13"
    db_storage_size: "100Gi"
    
    # Storage Configuration
    storage_class: "gp3-csi"
    pv_size: "50Gi"
    
    # Ingress Configuration
    ingress_type: "route"  # or "ingress"
    domain_name: "automation.company.com"

  tasks:
    # Prerequisites and validation
    - name: Validate prerequisites
      block:
        - name: Check required environment variables
          fail:
            msg: "{{ item }} environment variable is required"
          when: lookup('env', item) == ""
          loop:
            - AAP_ADMIN_PASSWORD
            - OPENSHIFT_TOKEN
            - AAP_LICENSE_MANIFEST
          tags: [prerequisite]

        - name: Verify OpenShift CLI access
          command: oc whoami
          register: oc_user
          failed_when: oc_user.rc != 0
          tags: [prerequisite]

        - name: Display OpenShift user information
          debug:
            msg: "Connected to OpenShift as: {{ oc_user.stdout }}"
          tags: [prerequisite]

        - name: Check cluster resources
          command: oc get nodes
          register: cluster_nodes
          changed_when: false
          tags: [prerequisite]

    # Operator installation
    - name: Install AAP Operator
      block:
        - name: Create operator namespace
          kubernetes.core.k8s:
            name: ansible-automation-platform-operator
            api_version: v1
            kind: Namespace
            state: present
          tags: [operator]

        - name: Create operator group
          kubernetes.core.k8s:
            definition:
              apiVersion: operators.coreos.com/v1
              kind: OperatorGroup
              metadata:
                name: ansible-automation-platform-operator
                namespace: ansible-automation-platform-operator
              spec:
                targetNamespaces:
                  - ansible-automation-platform-operator
          tags: [operator]

        - name: Create AAP operator subscription
          kubernetes.core.k8s:
            definition:
              apiVersion: operators.coreos.com/v1alpha1
              kind: Subscription
              metadata:
                name: ansible-automation-platform-operator
                namespace: ansible-automation-platform-operator
              spec:
                channel: stable-2.4-cluster-scoped
                name: ansible-automation-platform-operator
                source: redhat-operators
                sourceNamespace: openshift-marketplace
          tags: [operator]

        - name: Wait for operator to be ready
          kubernetes.core.k8s_info:
            api_version: operators.coreos.com/v1alpha1
            kind: ClusterServiceVersion
            namespace: ansible-automation-platform-operator
            label_selectors:
              - operators.coreos.com/ansible-automation-platform-operator.ansible-automation-platform-operator
            wait: true
            wait_condition:
              type: Succeeded
              status: "True"
            wait_timeout: 600
          tags: [operator]

    # Namespace and RBAC setup
    - name: Setup platform namespace
      block:
        - name: Create AAP namespace
          kubernetes.core.k8s:
            name: "{{ openshift_namespace }}"
            api_version: v1
            kind: Namespace
            state: present
          tags: [namespace]

        - name: Create service account
          kubernetes.core.k8s:
            definition:
              apiVersion: v1
              kind: ServiceAccount
              metadata:
                name: ansible-automation-platform-sa
                namespace: "{{ openshift_namespace }}"
          tags: [namespace]

        - name: Create cluster role binding
          kubernetes.core.k8s:
            definition:
              apiVersion: rbac.authorization.k8s.io/v1
              kind: ClusterRoleBinding
              metadata:
                name: ansible-automation-platform-admin
              subjects:
                - kind: ServiceAccount
                  name: ansible-automation-platform-sa
                  namespace: "{{ openshift_namespace }}"
              roleRef:
                kind: ClusterRole
                name: cluster-admin
                apiGroup: rbac.authorization.k8s.io
          tags: [namespace]

    # License and secrets configuration
    - name: Configure secrets and licenses
      block:
        - name: Create admin password secret
          kubernetes.core.k8s:
            definition:
              apiVersion: v1
              kind: Secret
              metadata:
                name: automation-controller-admin-password
                namespace: "{{ openshift_namespace }}"
              type: Opaque
              stringData:
                password: "{{ lookup('env', 'AAP_ADMIN_PASSWORD') }}"
          tags: [secrets]

        - name: Create license manifest secret
          kubernetes.core.k8s:
            definition:
              apiVersion: v1
              kind: Secret
              metadata:
                name: automation-controller-license
                namespace: "{{ openshift_namespace }}"
              type: Opaque
              data:
                manifest.zip: "{{ lookup('env', 'AAP_LICENSE_MANIFEST') }}"
          tags: [secrets]

        - name: Create database password secret
          kubernetes.core.k8s:
            definition:
              apiVersion: v1
              kind: Secret
              metadata:
                name: postgres-admin-password
                namespace: "{{ openshift_namespace }}"
              type: Opaque
              stringData:
                password: "{{ lookup('password', '/tmp/postgres_password length=16 chars=ascii_letters,digits') }}"
          tags: [secrets]

    # PostgreSQL database deployment
    - name: Deploy PostgreSQL database
      block:
        - name: Create PostgreSQL deployment
          kubernetes.core.k8s:
            definition:
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: postgresql
                namespace: "{{ openshift_namespace }}"
                labels:
                  app: postgresql
              spec:
                replicas: 1
                selector:
                  matchLabels:
                    app: postgresql
                template:
                  metadata:
                    labels:
                      app: postgresql
                  spec:
                    containers:
                      - name: postgresql
                        image: "registry.redhat.io/rhel8/postgresql-{{ postgresql_version }}:latest"
                        env:
                          - name: POSTGRESQL_DATABASE
                            value: "automation_controller"
                          - name: POSTGRESQL_USER
                            value: "awx"
                          - name: POSTGRESQL_PASSWORD
                            valueFrom:
                              secretKeyRef:
                                name: postgres-admin-password
                                key: password
                        ports:
                          - containerPort: 5432
                        volumeMounts:
                          - name: postgresql-data
                            mountPath: /var/lib/pgsql/data
                    volumes:
                      - name: postgresql-data
                        persistentVolumeClaim:
                          claimName: postgresql-data
          tags: [database]

        - name: Create PostgreSQL PVC
          kubernetes.core.k8s:
            definition:
              apiVersion: v1
              kind: PersistentVolumeClaim
              metadata:
                name: postgresql-data
                namespace: "{{ openshift_namespace }}"
              spec:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: "{{ db_storage_size }}"
                storageClassName: "{{ storage_class }}"
          tags: [database]

        - name: Create PostgreSQL service
          kubernetes.core.k8s:
            definition:
              apiVersion: v1
              kind: Service
              metadata:
                name: postgresql
                namespace: "{{ openshift_namespace }}"
              spec:
                selector:
                  app: postgresql
                ports:
                  - port: 5432
                    targetPort: 5432
          tags: [database]

        - name: Wait for PostgreSQL to be ready
          kubernetes.core.k8s_info:
            api_version: apps/v1
            kind: Deployment
            name: postgresql
            namespace: "{{ openshift_namespace }}"
            wait: true
            wait_condition:
              type: Available
              status: "True"
            wait_timeout: 300
          tags: [database]

    # Automation Controller deployment
    - name: Deploy Automation Controller
      block:
        - name: Create AutomationController CR
          kubernetes.core.k8s:
            definition:
              apiVersion: automationcontroller.ansible.com/v1beta1
              kind: AutomationController
              metadata:
                name: automation-controller
                namespace: "{{ openshift_namespace }}"
              spec:
                replicas: "{{ automation_controller_replicas }}"
                admin_user: admin
                admin_password_secret: automation-controller-admin-password
                license_secret: automation-controller-license
                create_preload_data: true
                route_tls_termination_mechanism: Edge
                route_host: "controller.{{ domain_name }}"
                loadbalancer_protocol: https
                loadbalancer_port: 443
                postgres_configuration_secret: postgres-admin-password
                postgres_data_path: /var/lib/postgresql/data/pgdata
                postgres_image: "registry.redhat.io/rhel8/postgresql-{{ postgresql_version }}"
                postgres_storage_class: "{{ storage_class }}"
                postgres_storage_requirements:
                  requests:
                    storage: "{{ db_storage_size }}"
                web_replicas: "{{ automation_controller_replicas }}"
                task_replicas: "{{ automation_controller_replicas }}"
                projects_persistence: true
                projects_storage_class: "{{ storage_class }}"
                projects_storage_size: "{{ pv_size }}"
          tags: [controller]

        - name: Wait for AutomationController to be ready
          kubernetes.core.k8s_info:
            api_version: automationcontroller.ansible.com/v1beta1
            kind: AutomationController
            name: automation-controller
            namespace: "{{ openshift_namespace }}"
            wait: true
            wait_condition:
              type: Running
              status: "True"
            wait_timeout: 1200
          tags: [controller]

    # Automation Hub deployment
    - name: Deploy Automation Hub
      block:
        - name: Create AutomationHub CR
          kubernetes.core.k8s:
            definition:
              apiVersion: automationhub.ansible.com/v1beta1
              kind: AutomationHub
              metadata:
                name: automation-hub
                namespace: "{{ openshift_namespace }}"
              spec:
                replicas: "{{ automation_hub_replicas }}"
                route_tls_termination_mechanism: Edge
                route_host: "hub.{{ domain_name }}"
                loadbalancer_protocol: https
                loadbalancer_port: 443
                admin_password_secret: automation-controller-admin-password
                postgres_configuration_secret: postgres-admin-password
                postgres_storage_class: "{{ storage_class }}"
                postgres_storage_requirements:
                  requests:
                    storage: "50Gi"
                file_storage_size: "100Gi"
                file_storage_access_mode: ReadWriteMany
                file_storage_storage_class: "{{ storage_class }}"
          tags: [hub]

        - name: Wait for AutomationHub to be ready
          kubernetes.core.k8s_info:
            api_version: automationhub.ansible.com/v1beta1
            kind: AutomationHub
            name: automation-hub
            namespace: "{{ openshift_namespace }}"
            wait: true
            wait_condition:
              type: Running
              status: "True"
            wait_timeout: 900
          tags: [hub]

    # Event-Driven Ansible deployment
    - name: Deploy Event-Driven Ansible
      block:
        - name: Create EDA Controller CR
          kubernetes.core.k8s:
            definition:
              apiVersion: eda.ansible.com/v1alpha1
              kind: EDA
              metadata:
                name: eda-controller
                namespace: "{{ openshift_namespace }}"
              spec:
                replicas: "{{ eda_controller_replicas }}"
                route_tls_termination_mechanism: Edge
                route_host: "eda.{{ domain_name }}"
                loadbalancer_protocol: https
                loadbalancer_port: 443
                admin_password_secret: automation-controller-admin-password
                postgres_configuration_secret: postgres-admin-password
                postgres_storage_class: "{{ storage_class }}"
                postgres_storage_requirements:
                  requests:
                    storage: "20Gi"
          tags: [eda]

        - name: Wait for EDA Controller to be ready
          kubernetes.core.k8s_info:
            api_version: eda.ansible.com/v1alpha1
            kind: EDA
            name: eda-controller
            namespace: "{{ openshift_namespace }}"
            wait: true
            wait_condition:
              type: Running
              status: "True"
            wait_timeout: 900
          tags: [eda]

    # Monitoring and observability
    - name: Configure monitoring
      block:
        - name: Create ServiceMonitor for Controller
          kubernetes.core.k8s:
            definition:
              apiVersion: monitoring.coreos.com/v1
              kind: ServiceMonitor
              metadata:
                name: automation-controller-metrics
                namespace: "{{ openshift_namespace }}"
                labels:
                  app: automation-controller
              spec:
                selector:
                  matchLabels:
                    app.kubernetes.io/name: automation-controller
                endpoints:
                  - port: http-metrics
                    interval: 30s
                    path: /metrics
          tags: [monitoring]

        - name: Create Grafana dashboard ConfigMap
          kubernetes.core.k8s:
            definition:
              apiVersion: v1
              kind: ConfigMap
              metadata:
                name: aap-grafana-dashboard
                namespace: "{{ openshift_namespace }}"
                labels:
                  grafana_dashboard: "1"
              data:
                aap-dashboard.json: |
                  {
                    "dashboard": {
                      "title": "Ansible Automation Platform",
                      "panels": [
                        {
                          "title": "Job Success Rate",
                          "type": "stat",
                          "targets": [
                            {
                              "expr": "ansible_automation_controller_job_success_total / ansible_automation_controller_job_total * 100"
                            }
                          ]
                        },
                        {
                          "title": "Active Jobs",
                          "type": "graph",
                          "targets": [
                            {
                              "expr": "ansible_automation_controller_jobs_running"
                            }
                          ]
                        }
                      ]
                    }
                  }
          tags: [monitoring]

    # Post-deployment validation
    - name: Validate deployment
      block:
        - name: Check all pods are running
          kubernetes.core.k8s_info:
            api_version: v1
            kind: Pod
            namespace: "{{ openshift_namespace }}"
            label_selectors:
              - app.kubernetes.io/part-of=automation-controller
          register: controller_pods
          tags: [validate]

        - name: Verify external access
          uri:
            url: "https://controller.{{ domain_name }}/api/v2/ping/"
            method: GET
            status_code: 200
            validate_certs: false
          retries: 5
          delay: 30
          tags: [validate]

        - name: Display deployment summary
          debug:
            msg: |
              🎉 IBM Ansible Automation Platform Deployment Complete!
              
              📊 Controller: https://controller.{{ domain_name }}
              🏪 Hub: https://hub.{{ domain_name }}
              ⚡ EDA: https://eda.{{ domain_name }}
              
              👤 Admin User: admin
              🔐 Admin Password: {{ lookup('env', 'AAP_ADMIN_PASSWORD') }}
              
              📈 Running Pods: {{ controller_pods.resources | length }}
              🔧 Platform Version: {{ aap_version }}
              
              Next Steps:
              1. Access the Controller UI to configure organizations
              2. Upload automation content to Private Automation Hub
              3. Configure event-driven automation rules
              4. Set up RBAC and user management
          tags: [validate]

  handlers:
    - name: restart automation-controller
      kubernetes.core.k8s:
        state: absent
        api_version: v1
        kind: Pod
        namespace: "{{ openshift_namespace }}"
        label_selectors:
          - app.kubernetes.io/name=automation-controller
      listen: "restart controller"

# Cleanup tasks (run with --tags cleanup)
- name: Cleanup AAP deployment
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Remove AutomationController
      kubernetes.core.k8s:
        api_version: automationcontroller.ansible.com/v1beta1
        kind: AutomationController
        name: automation-controller
        namespace: "{{ openshift_namespace }}"
        state: absent
      tags: [never, cleanup]

    - name: Remove AutomationHub
      kubernetes.core.k8s:
        api_version: automationhub.ansible.com/v1beta1
        kind: AutomationHub
        name: automation-hub
        namespace: "{{ openshift_namespace }}"
        state: absent
      tags: [never, cleanup]

    - name: Remove EDA Controller
      kubernetes.core.k8s:
        api_version: eda.ansible.com/v1alpha1
        kind: EDA
        name: eda-controller
        namespace: "{{ openshift_namespace }}"
        state: absent
      tags: [never, cleanup]

    - name: Remove namespace
      kubernetes.core.k8s:
        name: "{{ openshift_namespace }}"
        api_version: v1
        kind: Namespace
        state: absent
      tags: [never, cleanup]