# Google Cloud Landing Zone Configuration Example
# Copy this file to terraform.tfvars and customize values for your environment

# Project and Organization Configuration
project_id              = "my-landing-zone-project"
organization_id         = "123456789012"  # Optional: Leave empty if using folder
parent_folder_id        = ""              # Use if not using organization
billing_account_id      = "ABCDEF-012345-GHIJKL"
region                  = "us-central1"
environment            = "prod"
network_prefix         = "lz"

# Terraform State Configuration
terraform_state_bucket = "my-terraform-state-bucket"

# Folder Structure
create_folders = true

# Network Configuration
internal_ip_range = "10.0.0.0/8"

# Hub VPC Subnets - Customize CIDR blocks for your network plan
hub_subnets = {
  hub-central = {
    cidr   = "10.0.1.0/24"
    region = "us-central1"
  }
  hub-east = {
    cidr   = "10.1.1.0/24"
    region = "us-east1"
  }
  hub-west = {
    cidr   = "10.2.1.0/24"
    region = "us-west1"
  }
}

# Shared Services VPC Subnets
shared_services_subnets = {
  shared-central = {
    cidr   = "10.0.2.0/24"
    region = "us-central1"
  }
  shared-east = {
    cidr   = "10.1.2.0/24"
    region = "us-east1"
  }
}

# Production Spoke VPCs - Add or modify based on your application needs
production_spokes = {
  web-app = {
    cidr   = "10.10.0.0/16"
    region = "us-central1"
    secondary_ranges = [
      {
        range_name    = "gke-pods"
        ip_cidr_range = "192.168.0.0/16"
      },
      {
        range_name    = "gke-services"
        ip_cidr_range = "172.16.0.0/16"
      }
    ]
  }
  database = {
    cidr   = "10.20.0.0/16"
    region = "us-central1"
  }
  analytics = {
    cidr   = "10.30.0.0/16"
    region = "us-east1"
  }
}

# DNS Configuration
enable_private_dns   = true
private_dns_domain   = "internal.example.com"

# Security Configuration
kms_location                  = "us-central1"
enable_security_logging       = true
security_logs_retention_days  = 365
logs_bucket_location         = "US"
enable_scc_notifications     = true
scc_notification_topic       = "projects/my-landing-zone-project/topics/security-notifications"

# Organization Policies
enable_org_policies           = true
enable_shielded_vm_policy     = true
enable_os_login_policy        = true
enable_serial_port_policy     = true

# Budget Configuration
enable_budget_alerts         = true
monthly_budget_amount        = 25000  # USD
budget_notification_channels = [
  "projects/my-landing-zone-project/notificationChannels/CHANNEL_ID_1",
  "projects/my-landing-zone-project/notificationChannels/CHANNEL_ID_2"
]

# IAM Configuration - Customize based on your organization structure
folder_iam_members = {
  security = {
    security_admins    = ["group:security-admins@example.com"]
    project_creators   = ["group:security-team@example.com"]
  }
  shared_services = {
    network_admins     = ["group:network-admins@example.com"]
    project_creators   = ["group:platform-team@example.com"]
  }
  production = {
    compute_admins     = ["group:production-admins@example.com"]
    project_creators   = ["group:app-teams@example.com"]
  }
  non_production = {
    project_creators   = ["group:developers@example.com"]
    compute_admins     = ["group:dev-leads@example.com"]
  }
  sandbox = {
    project_creators   = ["group:all-developers@example.com"]
  }
}

# Essential Contacts
essential_contacts = {
  security = {
    email                                = "security@example.com"
    notification_category_subscriptions = ["SECURITY", "SUSPENSION"]
  }
  billing = {
    email                                = "billing@example.com"
    notification_category_subscriptions = ["BILLING"]
  }
  technical = {
    email                                = "platform-team@example.com"
    notification_category_subscriptions = ["TECHNICAL", "PRODUCT_UPDATES"]
  }
}

# Monitoring Configuration
enable_monitoring_workspace = true
notification_channels = {
  email_admins = {
    type         = "email"
    display_name = "Admin Email Notifications"
    labels = {
      email_address = "platform-alerts@example.com"
    }
  }
  slack_alerts = {
    type         = "slack"
    display_name = "Slack Notifications"
    labels = {
      channel_name = "#gcp-alerts"
      url          = "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
    }
  }
}

# VPN Configuration (Optional)
enable_vpn = false
vpn_config = {
  peer_gateways = {
    onprem-gateway-1 = {
      ip_address     = "203.0.113.1"
      shared_secret  = "your-shared-secret"  # Use secret manager in production
      peer_ip_ranges = ["192.168.0.0/16", "172.16.0.0/12"]
    }
  }
  local_traffic_selector  = ["10.0.0.0/8"]
  remote_traffic_selector = ["192.168.0.0/16", "172.16.0.0/12"]
}

# Interconnect Configuration (Optional)
enable_interconnect = false
interconnect_config = {
  interconnect_attachment_name = "my-interconnect-attachment"
  router_name                 = "my-interconnect-router"
  bgp_asn                    = 65001
  vlan_tag                   = 100
  bandwidth                  = "BPS_10G"
  admin_enabled              = true
}

# Custom Firewall Rules
custom_firewall_rules = {
  allow_health_checks = {
    description      = "Allow Google Cloud health checks"
    direction        = "INGRESS"
    priority         = 1000
    source_ranges    = ["130.211.0.0/22", "35.191.0.0/16"]
    target_tags      = ["http-server", "https-server"]
    allow_rules = [
      {
        protocol = "tcp"
        ports    = ["80", "443", "8080"]
      }
    ]
  }
  
  allow_monitoring = {
    description      = "Allow monitoring agents"
    direction        = "INGRESS"
    priority         = 1100
    source_ranges    = ["10.0.0.0/8"]
    target_tags      = ["monitoring"]
    allow_rules = [
      {
        protocol = "tcp"
        ports    = ["9090", "9100", "3000"]
      }
    ]
  }
  
  deny_all_external = {
    description       = "Deny all external traffic to internal services"
    direction         = "INGRESS"
    priority          = 65534
    source_ranges     = ["0.0.0.0/0"]
    target_tags       = ["internal-only"]
    deny_rules = [
      {
        protocol = "all"
      }
    ]
  }
}

# Cloud Asset Inventory
enable_cloud_asset_inventory = true
asset_inventory_config = {
  feed_output_config = {
    pubsub_destination = {
      topic = "projects/my-landing-zone-project/topics/asset-inventory"
    }
  }
  asset_types = [
    "compute.googleapis.com/Instance",
    "storage.googleapis.com/Bucket",
    "iam.googleapis.com/ServiceAccount"
  ]
}

# Backup Configuration
enable_backup_policies = true
backup_retention_days  = 30

# Resource Labels - Add more labels based on your organization's requirements
labels = {
  created_by      = "terraform"
  project         = "landing-zone"
  owner           = "platform-team"
  cost_center     = "infrastructure"
  environment     = "production"
  compliance      = "required"
  data_class      = "internal"
  backup_policy   = "daily"
  monitoring      = "enabled"
}

# Compute Instance Templates (Optional)
enable_compute_instance_templates = false
compute_instance_templates = {
  web-server = {
    machine_type = "e2-medium"
    disk_size_gb = 50
    disk_type    = "pd-standard"
    image_family = "ubuntu-2004-lts"
    image_project = "ubuntu-os-cloud"
    startup_script = "#!/bin/bash\napt-get update\napt-get install -y nginx\nsystemctl start nginx"
    metadata = {
      enable-oslogin = "TRUE"
    }
    tags = ["http-server", "https-server"]
    network_tags = ["web", "public"]
  }
  
  app-server = {
    machine_type = "n2-standard-2"
    disk_size_gb = 100
    disk_type    = "pd-ssd"
    image_family = "ubuntu-2004-lts"
    image_project = "ubuntu-os-cloud"
    metadata = {
      enable-oslogin = "TRUE"
    }
    tags = ["app-server"]
    network_tags = ["internal", "app-tier"]
  }
}